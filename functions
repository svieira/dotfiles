# vim: set filetype=sh :
# Set the terminal emulator's title
title() {
  echo -ne "\033]0;"$*"\007"
}

# Simpler ssh tunnels
# tunnel some.host:8080 :9090
# tunnel another.host:5000 local.dev.host:8080
tunnel() {
  local remoteHost=${1/:*/}
  local remotePort=${1/*:/}
  local localHost=${2/:*/}
  local localPort=${2/*:/}

  localHost=${localHost:-localhost}
  echo "Mapping $remoteHost:$remotePort to $localHost:$localPort"

  ssh -N -L $localPort:${localHost}:$remotePort $remoteHost
}

current_date() {
  date +${1:-%Y-%m-%d}
}

current_time() {
  date +${1:-%H:%M:%S}
}

notify() {
  local SCRIPT_NAME=$FUNCNAME
  local HELP=

  read -rd '' HELP << HELP
$SCRIPT_NAME
Put a notification in the notification center
(requires terminal-notifier)

Usage:

$SCRIPT_NAME
  -m | --message msg          - The message to display in the notification
  [-i | --icon  name]         - The name of the icon to display
                                (default: Terminal)
  [-t | --title title]        - The title to display for the notification
                                (default: Terminal)
  [...notifier-args]          - Additional arguments for terminal-notifier
HELP

  local notifier_args=
  local icon=
  local title=
  local message=

  while [ "${1+defined}" ]; do
    case $1 in
      -h|--help) echo "$HELP" && return 0;;
      -i|--icon) icon="$2"; shift;;
      -m|--message) message="$2"; shift;;
      -t|--title) title="$2"; shift;;
      *) notifier_args+="$1 ";;
    esac
    shift
  done

  if [ -n "$icon" ]; then
    [[ ! "$icon" =~ ^(~|/) ]] && icon=~/Pictures/icons/$icon
    [[ ! "$icon" =~ \.png$ ]] && icon=${icon}.png
  fi
  echo $notifier_args
  terminal-notifier -message "$message" ${title:+-title "$title"} ${icon:+-appIcon "$icon"} $notifier_args
}

notify-complete() {
  ( "${@}" )
  local status=$?
  if [ $status -eq 0 ]; then
    notify --message "Ran ${*}"
  else
    notify --message "Failed to run ${*}" --title "Exit status: $status"
  fi
}

toggle-wifi() {
  local SCRIPT_NAME=$FUNCNAME
  local HELP=

  read -rd '' HELP << HELP
$SCRIPT_NAME
Restart wireless for when things are acting weird

Usage:

$SCRIPT_NAME
  [-d | --device device-name:en0]      - Device Airport is listening on
  [-t | --timeout wait-time:1s]        - Time to wait before sending power-on signal again
HELP

  local timeout=1s;
  local device=en0;

  while [ "${1+defined}" ]; do
    case $1 in
      -h|--help) echo "$HELP" && return 0;;
      -t|--timeout) timeout="$2"; shift;;
      -d|--device) device="$2"; shift;;
    esac
    shift
  done

  networksetup -setairportpower "$device" off;
  echo "Waiting for shutdown to complete ...";
  sleep $timeout;
  echo "Restarting ...";
  networksetup -setairportpower "$device" on;
}

# assign variableName command --string here
# echo $variableName
# Via http://stackoverflow.com/a/21636953/135978
assign() {
  local var=$1; shift;
  local channel=/tmp/assignfifo-${BASH_PID}-${BASH_SUBSHELL}
  mkfifo $channel
  exec 3<> $channel
  "$@" 1>&3
  local result=$?
  if [[ $result -eq 0 ]];
    then read -u3 ${var}
  fi
  exec 3>&-
  rm $channel
  return $result
}

# Use clipboard in shell pipelines
# clip | xargs echo           # uses pbpaste
# ps -A | grep search | clip  # uses pbcopy
clip() {
  [ -t 0 ] && pbpaste || pbcopy
}

# Get the absolute path of a file or directory
# Via: http://stackoverflow.com/a/23002317/135978
abspath() {
  # $1 : relative filename
  if [ -d "$1" ]; then
    # dir
    echo $(cd "$1"; pwd)
  elif [ -f "$1" ]; then
    # file
    if [[ $1 == */* ]]; then
      echo $(cd "${1%/*}"; pwd)/${1##*/}
    else
      echo $(pwd)/$1
    fi
  fi
}

# Bookmark a directory so you can `cd {bookmark-name}` to it from anywhere
bmd() {
  local directory=`abspath ${1:-.}`
  local bookmark_name=${2:-${directory##*/}}
  echo ln -si $directory ${BOOKMARK_DIR:-$CDPATH}/$bookmark_name
  ln -si $directory ${BOOKMARK_DIR:-$CDPATH}/$bookmark_name
}

# For those times when you need to wrap `set -e` around just *one* command.
try-or-fail() {
  eval "$@"
  local status=$?
  [ $status -ne 0 ] && echo "Failed to execute $@" && exit $status
}

confirm() {
  local msg=${1:-Are you sure}
  local choice=
  read -r -n 1 -p "$msg [y/N]? " choice
  echo
  case "$choice" in
    y*|Y* ) return 0;;
    * ) return 1;;
  esac
}

pause() {
  local ignored
  read -s -r -p "Press any key to continue..." -n 1 ignored
}

error() {
  echo >&2 $@
}

fail() {
  error $@
  exit 1
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
# VIA: https://github.com/mathiasbynens/dotfiles/blob/287f38e2196d8367cf2cb33b6f75860dbf17492a/.functions#L240-246
tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# history with grep
#
# history list
# history <filter> greped history
# Taken from humanism.sh
history() {
  if [ $# -eq 0 ]; then
    builtin history
  # Pass -args to the underlying command
  elif [[ "$1" == "-"* ]]; then
    builtin history $@
  else
    builtin history | grep $@
  fi
}

# cd without path echo when CDPATH is set
# Taken from https://superuser.com/a/729207
cd() {
  if [ -z "$*" ]; then
    destination=~
  else
    destination="$*"
  fi
  builtin cd -P "${destination}" >/dev/null
}

determine-python-version() {
  local venv="$1"
  local exec_name=python
  local exec_version=
  if [[ -L "$venv"/bin/python3 ]]; then
    exec_version=3;
  elif [[ -L "$venv"/bin/pypy ]]; then
    exec_name=pypy
    if [[ -L "$venv"/bin/pypy3 ]]; then
      exec_version=3;
    fi
  fi
  if [[ $exec_name != pypy && $exec_version != 3 ]]; then
    exec_version=2
  fi
  echo "${exec_name}${exec_version}"
}

virtualenv-restore() {
  local venv="$1"
  local python_version=`determine-python-version "$1"`
  gfind "$venv" -type l -xtype l -delete;
  virtualenv --python=${python_version} "$venv";
}

pipsi-restore() {
  for venv in "$PIPSI_HOME"/*; do
    virtualenv-restore "$venv"
  done
}

pipsi-recreate() {
  set -xv
  for venv in "$PIPSI_HOME"/*; do
    local python_version=`determine-python-version "$venv"`
    local tool_name=`basename "$venv"`
    [[ "$tool_name" == pipsi ]] && continue
    pipsi uninstall --yes "$tool_name"
    pipsi install --python=$python_version "$tool_name"
  done
  set +xv
}

# Usage:
#   on_exit rm -f /tmp/foo
#   on_exit echo "I am exiting"
#   tempfile=$(mktemp)
#   on_exit rm -f "$tempfile"
# From http://stackoverflow.com/documentation/bash/363/using-trap/2398/accumulate-a-list-of-trap-work-to-run-at-exit
# Based on http://www.linuxjournal.com/content/use-bash-trap-statement-cleanup-temporary-files
_on_exit() {
  for cmd in "${on_exit_items[@]}"; do
    ( eval "$cmd" )
  done
}

on_exit() {
  [[ "$#" -lt 1 ]] && error "Must provide command to on_exit" && return 1;
  local n=${#on_exit_items[*]}
  on_exit_items[$n]="$*"
  if [[ $n -eq 0 ]]; then
    trap _on_exit EXIT
  fi
}

# Lazily load NMV when a node binary is invoked (node / npm / globally installed dependencies
# Via https://www.reddit.com/r/node/comments/4tg5jg/lazy_load_nvm_for_faster_shell_start/d5ib9fs
load_nvm() {
  . /usr/local/opt/nvm/nvm.sh
}

node() {
  unset -f node
  [ -z "$NVM_BIN" ] && load_nvm
  node $@
}

npm() {
  unset -f npm
  [ -z "$NVM_BIN" ] && load_nvm
  npm $@
}

npx() {
  unset -f npx
  [ -z "$NVM_BIN" ] && load_nvm
  npx $@
}

yarn() {
  unset -f yarn
  [ -z "$NVM_BIN" ] && load_nvm
  yarn $@
}

nvm() {
  unset -f nvm
  [ -z "$NVM_BIN" ] && load_nvm
  nvm $@
}

# Turn a URL into a host suitable for ssh / scp
function url-to-host-name {
  local SCRIPT_NAME=$FUNCNAME
  local HELP=

  read -rd '' HELP << HELP
$SCRIPT_NAME
Change anything url-ish into a usable host name

Usage:

$SCRIPT_NAME
    url-like         - the url of the site,
                       with or without the protocol, port, or path
                       Or something vaguely in the form of an IPv4 address
HELP

  while [ "${1+defined}" ]; do
    case $1 in
      -h|--help) echo "$HELP" && return 0;;
      *) echo "$1" | sed -E 's#^(.*://)?(([^:/]+)|([0-9.]+)).*$#\2#g';;
    esac
    shift
  done

  return;
}

update() {
  if command -v update_start; then update_start; fi
  brew update && brew upgrade

  pipsi upgrade pipsi
  for venv in $PIPSI_HOME/*; do
    export PATH=$PATH
    update-pipsi-package "$venv" &
  done
  wait

  if [[ "$1" == "--all" ]]; then
    sudo softwareupdate --list
  fi

  if command -v update_local; then update_local; fi
}

update-pipsi-package() {
  # Nicely updated version taken from https://github.com/mitsuhiko/pipsi/issues/72#issuecomment-402573086
  package_dir="$1"
  package_name="$(basename "$package_dir")"
  echo pipsi upgrade "$package_name"
  pipsi upgrade "$package_name"
  . "$package_dir"/bin/activate
  pip install --upgrade pip
  deactivate
}

cleanup() {
  brew prune
  brew cleanup

  # Restore python for pipsi
  # TODO: Maybe do the same for virtualenvwrapper-managed stuff too.
  virtualenv --version >&2 > /dev/null
  # Handle cases where python itself upgrades, clearing out virtualenv completely
  [[ $? != 0 ]] && pip3 install --force-reinstall virtualenvwrapper
  pipsi-restore

  if command -v cleanup_local; then cleanup_local; fi
}

# Override fzf to use the faster fd instead of find
# See https://github.com/junegunn/fzf#settings
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}
